{"version":3,"sources":["../src/Engine/index.ts","../src/types.ts","../src/RenderingLayer/index.ts","../src/RenderingLayer/StaticLayer/index.ts","../src/RenderingLayer/DynamicLayer/index.ts","../src/RenderingLayer/DeferredLayer/index.ts","../src/index.ts","pacman/constants.ts","pacman/entities/animal.ts","pacman/entities/background.ts","pacman/entities/pacman.ts","pacman/entities/score.ts","pacman/entities/manager.ts","pacman/index.ts"],"names":[],"mappings":"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","file":"pacman.bebc2b1e.js","sourceRoot":"../examples","sourcesContent":["import { IRenderingLayer } from '../RenderingLayer';\n\nimport { LayerIndex } from '../types';\n\nexport interface IEngine {\n\t/**\n\t * Start rendering\n\t */\n\tstart(): void;\n\n\t/**\n\t * Stop rendering\n\t */\n\tstop(): void;\n\n\t/**\n\t * Get a layer based on it's index and layer type.\n\t * @param layerIndex The z-index of a layer\n\t * @param layerType The layer type of the layer wanted\n\t */\n\tgetLayer(layerIndex: LayerIndex): IRenderingLayer | null;\n\n\t/**\n\t * Add a layer to the engine.\n\t * @param layer Layer to add to the engine\n\t */\n\tregisterLayer(layer: IRenderingLayer): void;\n}\n\nexport default class Engine implements IEngine {\n\t/**\n\t * Holds all layers\n\t */\n\tprivate layers: IRenderingLayer[];\n\n\t/**\n\t * Variable to know if we should keep rendering.\n\t */\n\tprivate shouldRender: boolean;\n\n\t/**\n\t * The handler ID of the rendering loop\n\t */\n\tprivate renderingId: number | null;\n\n\t/**\n\t * Keeps track of when the last frame was rendered to extract deltas.\n\t */\n\tprivate lastFrameRenderedTime: DOMHighResTimeStamp | null;\n\n\t/**\n\t * To prevent re-allocation of variables after each render/update loop,\n\t * we create an layer counter variable to reuse.\n\t */\n\tprivate layerCounter: number;\n\n\t/**\n\t * To prevent re-allocation of variables after each render/update loop,\n\t * we create a variable to keep track of the current delta time.\n\t */\n\tprivate currentDeltaTime: number;\n\n\tconstructor() {\n\t\tthis.layers = [];\n\t\tthis.layerCounter = 0;\n\n\t\t// animation control.\n\t\tthis.shouldRender = true;\n\t\tthis.lastFrameRenderedTime = null;\n\t\tthis.renderingId = null;\n\t\tthis.currentDeltaTime = 0;\n\n\t\t// rebinding.\n\t\tthis.requestFrameA = this.requestFrameA.bind(this);\n\t\tthis.requestFrameB = this.requestFrameB.bind(this);\n\t}\n\n\tgetLayer(layerIndex: LayerIndex) {\n\t\treturn this.layers.find((layer) => layer.layerIndex === layerIndex) || null;\n\t}\n\n\tregisterLayer(layer: IRenderingLayer) {\n\t\tthis.layers.push(layer);\n\t}\n\n\tstart() {\n\t\tthis.shouldRender = true; // say we want to animate.\n\t\tthis.renderingId = window.requestAnimationFrame(this.requestFrameA);\n\t}\n\n\tstop() {\n\t\tthis.shouldRender = false;\n\t\tif (this.renderingId) {\n\t\t\twindow.cancelAnimationFrame(this.renderingId);\n\t\t}\n\t}\n\n\trequestFrameA(timestamp: DOMHighResTimeStamp) {\n\t\tthis.render(timestamp);\n\n\t\tif (this.shouldRender) {\n\t\t\tthis.renderingId = window.requestAnimationFrame(this.requestFrameB);\n\t\t}\n\t}\n\n\trequestFrameB(timestamp: DOMHighResTimeStamp) {\n\t\tthis.render(timestamp);\n\n\t\tif (this.shouldRender) {\n\t\t\tthis.renderingId = window.requestAnimationFrame(this.requestFrameA);\n\t\t}\n\t}\n\n\trender(timestamp: DOMHighResTimeStamp = 0) {\n\t\tif (!this.lastFrameRenderedTime) {\n\t\t\tthis.lastFrameRenderedTime = timestamp;\n\t\t}\n\t\tthis.currentDeltaTime = timestamp - this.lastFrameRenderedTime;\n\t\tthis.lastFrameRenderedTime = timestamp;\n\n\t\tfor (this.layerCounter = 0; this.layerCounter < this.layers.length; this.layerCounter++) {\n\t\t\tthis.layers[this.layerCounter].update(this.currentDeltaTime);\n\t\t\tthis.layers[this.layerCounter].render();\n\t\t}\n\t}\n}\n","/**\n * The function used to render a layer from the engine\n */\nexport type RenderLayerFunction = () => void;\n\n/**\n * Function used to update a layer\n */\nexport type UpdateLayerFunction = (deltaTime: number) => void;\n\n/**\n * The function used to render entities within a layer\n */\nexport type RenderFunction = (context: CanvasRenderingContext2D) => void;\n\n/**\n * Function used to update entities within a layer\n */\nexport type UpdateFunction = (deltaTime: number) => void;\n\n/**\n * Inteface for a generic entity with a render and optional update statement.\n */\nexport interface IEntity {\n\trender: RenderFunction;\n\tupdate?: UpdateFunction;\n}\n\n/**\n * Type of a layer index\n */\nexport type LayerIndex = number;\n\n/**\n * Resize strategy types for the layer resize method.\n * FROM_ORIGIN: will resize the layer but will also make sure the center stays at the same position\n * FROM_CENTER: will resize the layer but will also make sure the top-left stays at the same position\n */\nexport enum ResizeMethod {\n\tFROM_ORIGIN, // from the top left\n\tFROM_CENTER, // from the center\n}\n","import { IEntity, LayerIndex, RenderLayerFunction, UpdateLayerFunction, ResizeMethod } from '../types';\n\n/**\n * An interface of all necessary functions and properties a rendering layer must have.\n */\nexport interface IRenderingLayer {\n\t/**\n\t * The z-index of the rendering layer.\n\t */\n\treadonly layerIndex: LayerIndex;\n\n\t/**\n\t * Render all entities in this layer to the context.\n\t */\n\trender: RenderLayerFunction;\n\n\t/**\n\t * Update all entities in this layer\n\t */\n\tupdate: UpdateLayerFunction;\n\n\t/**\n\t * Get the rendering layer's canvas context.\n\t */\n\tgetContext: () => CanvasRenderingContext2D;\n\n\t/**\n\t * Get the width of the layer\n\t */\n\tgetWidth: () => number;\n\n\t/**\n\t * Get the height of the layer\n\t */\n\tgetHeight: () => number;\n\n\t/**\n\t * Get the x position of the layer\n\t */\n\tgetX: () => number;\n\n\t/**\n\t * Get the y position of the layer\n\t */\n\tgetY: () => number;\n\n\t/**\n\t * Resize the layer\n\t */\n\tresize: (width: number, height: number, resizeMethod: ResizeMethod) => void;\n\n\t/**\n\t * Add a new entity to this rendering layer\n\t * @param entity New entity to be added\n\t */\n\taddEntity(entity: IEntity): void;\n\n\t/**\n\t * Remove an entity from this rendering layer\n\t * @param entity Entity to be removed\n\t */\n\tremoveEntity(entity: IEntity): void;\n}\n\nexport abstract class RenderingLayer implements IRenderingLayer {\n\t/**\n\t * The z-index of the rendering layer\n\t */\n\treadonly layerIndex: LayerIndex;\n\n\t/**\n\t * The canvas' 2D rendering context.\n\t */\n\treadonly context: CanvasRenderingContext2D;\n\n\t/**\n\t * Width of the layer in the document\n\t */\n\tprivate width: number;\n\n\t/**\n\t * Height of the layer in the document\n\t */\n\tprivate height: number;\n\n\t/**\n\t * X Position of the layer\n\t */\n\tprivate x: number;\n\n\t/**\n\t * X Position of the layer\n\t */\n\tprivate y: number;\n\n\t/**\n\t * List of entities that are part of this rendering layer.\n\t */\n\tprivate entities: IEntity[];\n\n\t/**\n\t * To prevent re-allocation of variables after each render/update loop,\n\t * we create an entity counter variable to reuse.\n\t */\n\tprivate entityCounter: number;\n\n\t/**\n\t * Construct a new layer that will hold a list of entityes or updaters.\n\t * @param layerIndex Number representing the z-index of the layer on the screen.\n\t * @param layerType Whether the layer elements will be updated on every frame\n\t * @param entity An optional, default first entity.\n\t */\n\tconstructor(\n\t\tlayerIndex: LayerIndex,\n\t\tinitialWidth?: number,\n\t\tinitialHeight?: number,\n\t\tinitialX: number = 0,\n\t\tinitialY: number = 0,\n\t) {\n\t\tthis.layerIndex = layerIndex;\n\n\t\tthis.entities = [];\n\t\tthis.entityCounter = 0;\n\n\t\tthis.width = initialWidth === undefined ? document.body.clientWidth + 1 : initialWidth;\n\t\tthis.height = initialHeight === undefined ? document.body.clientHeight + 1 : initialHeight;\n\t\tthis.x = initialX;\n\t\tthis.y = initialY;\n\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.style.position = 'absolute';\n\t\tcanvas.style.zIndex = `${this.layerIndex}`;\n\t\tcanvas.style.display = 'inline';\n\t\tdocument.body.appendChild(canvas);\n\n\t\tconst context = canvas.getContext('2d');\n\t\tif (!context) {\n\t\t\tthrow new Error('Could not initialize canvas 2D context.');\n\t\t}\n\t\tthis.context = context;\n\t\tthis.context.translate(-0.5, -0.5); // disables anti-aliasing\n\t\tthis.resize(this.width, this.height);\n\t\tthis.setPosition(this.x, this.y);\n\t}\n\n\t/**\n\t * Change the size of the layer.\n\t * @param newWidth The new width of the layer\n\t * @param newHeight The new height of the layer\n\t * @param resizeMethod How should we resize the layer: from the center, or from the top-left?\n\t */\n\tresize(newWidth: number, newHeight: number, resizeMethod: ResizeMethod = ResizeMethod.FROM_ORIGIN) {\n\t\tlet xOffset = 0;\n\t\tlet yOffset = 0;\n\t\tif (resizeMethod === ResizeMethod.FROM_CENTER) {\n\t\t\txOffset = (this.width - newWidth) / 2;\n\t\t\tyOffset = (this.height - newHeight) / 2;\n\t\t}\n\n\t\tthis.width = newWidth;\n\t\tthis.height = newHeight;\n\n\t\tthis.context.canvas.width = this.width;\n\t\tthis.context.canvas.height = this.height;\n\n\t\tthis.setPosition(this.x + xOffset, this.y + yOffset);\n\t}\n\n\t/**\n\t * Change the position of this layer\n\t * @param newX the x position where 0 is the left of the document body.\n\t * @param newY the y position where 0 is the top of the document\n\t */\n\tsetPosition(newX: number, newY: number) {\n\t\tthis.x = newX;\n\t\tthis.y = newY;\n\n\t\tif (!this._isLayerWithinBounds()) {\n\t\t\tthrow new Error('Cannot position and resize a layer outside of document body.');\n\t\t}\n\n\t\tthis.context.canvas.style.left = `${this.x}px`;\n\t\tthis.context.canvas.style.top = `${this.y}px`;\n\t}\n\n\t/**\n\t * Add an entity to this layer\n\t * @param renderElement The entity that will be added to this layer\n\t */\n\taddEntity(entity: IEntity) {\n\t\tif (!this._isEntityValid(entity)) {\n\t\t\tthrow new Error('Invalid entity cannot be added to this layer.');\n\t\t}\n\t\tthis.entities.push(entity);\n\t}\n\n\t/**\n\t * Remove an entity from this layer. Effectively, unrendering it.\n\t * @param removeEntity Entity that will be deleted from this layer\n\t */\n\tremoveEntity(removeEntity: IEntity) {\n\t\tconst renderersIdx = this.entities.indexOf(removeEntity);\n\t\tif (renderersIdx !== -1) {\n\t\t\tthis.entities.splice(renderersIdx, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Get the width of the layer\n\t */\n\tgetWidth() {\n\t\treturn this.width;\n\t}\n\n\t/**\n\t * Get the height of the layer\n\t */\n\tgetHeight() {\n\t\treturn this.height;\n\t}\n\n\t/**\n\t * Get the x position of the layer\n\t */\n\tgetX() {\n\t\treturn this.x;\n\t}\n\n\t/**\n\t * Get the y position of the layer\n\t */\n\tgetY() {\n\t\treturn this.y;\n\t}\n\n\t/**\n\t * Get the canvas context for this layer\n\t */\n\tgetContext() {\n\t\treturn this.context;\n\t}\n\n\t/**\n\t * Clear the canvas' context.\n\t */\n\tclear() {\n\t\tthis.context.clearRect(-1, -1, this.width, this.height);\n\t}\n\n\t/**\n\t * Update all entities in our rendering layer.\n\t * If the rendering layer is not a dynamic layer, then no update is made.\n\t *\n\t * @param deltaTime Time since the last render in ms.\n\t */\n\tupdate(deltaTime: number) {\n\t\tfor (this.entityCounter = 0; this.entityCounter < this.entities.length; this.entityCounter++) {\n\t\t\t// We can force the entity's update function because it is checked in the `addEntity` function.\n\t\t\tthis.entities[this.entityCounter].update?.(deltaTime);\n\t\t}\n\t}\n\n\t/**\n\t * Render all entities of this rendering layer after clearing.\n\t */\n\trender() {\n\t\tthis.clear();\n\t\tfor (this.entityCounter = 0; this.entityCounter < this.entities.length; this.entityCounter++) {\n\t\t\tthis.entities[this.entityCounter].render(this.context);\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if the entity is valid for the given layer.\n\t * @param entity\n\t */\n\tabstract _isEntityValid(entity: IEntity): boolean;\n\n\t/**\n\t * Returns true if the entity has a render function.\n\t * @param entity\n\t */\n\tprotected _entityIsRenderable(entity: IEntity) {\n\t\treturn Boolean(entity.render);\n\t}\n\n\t/**\n\t * Returns true if the entity has an update function.\n\t * @param entity\n\t */\n\tprotected _entityIsUpdatable(entity: IEntity) {\n\t\treturn Boolean(entity.update);\n\t}\n\n\t/**\n\t * Is the layer within the document bounds.\n\t */\n\tprivate _isLayerWithinBounds() {\n\t\treturn (\n\t\t\tthis.width + this.x > document.body.clientWidth ||\n\t\t\tthis.height + this.y > document.body.clientHeight ||\n\t\t\tthis.x < 0 ||\n\t\t\tthis.y < 0\n\t\t);\n\t}\n}\n","import { IRenderingLayer, RenderingLayer } from '..';\nimport { LayerIndex, IEntity } from '../../types';\n\nexport interface IStaticLayer extends IRenderingLayer {\n\tallowRenderOnNextFrame(): void;\n}\n\nexport class StaticLayer extends RenderingLayer implements IStaticLayer {\n\tprivate rerenderNextFrame: boolean;\n\n\tconstructor(\n\t\tlayerIndex: LayerIndex,\n\t\tinitialWidth?: number,\n\t\tinitialHeight?: number,\n\t\tinitialX: number = 0,\n\t\tinitialY: number = 0,\n\t) {\n\t\tsuper(layerIndex, initialWidth, initialHeight, initialX, initialY);\n\n\t\tthis.rerenderNextFrame = false;\n\t}\n\n\tallowRenderOnNextFrame(): void {\n\t\tthis.rerenderNextFrame = true;\n\t}\n\n\t_isEntityValid(entity: IEntity): boolean {\n\t\treturn super._entityIsRenderable(entity);\n\t}\n\n\trender() {\n\t\tif (this.rerenderNextFrame) {\n\t\t\tthis.rerenderNextFrame = false;\n\t\t\tsuper.render();\n\t\t}\n\t}\n}\n","import { IRenderingLayer, RenderingLayer } from '..';\nimport { LayerIndex, IEntity } from '../../types';\n\nexport interface IDynamicLayer extends IRenderingLayer {}\n\nexport class DynamicLayer extends RenderingLayer implements IDynamicLayer {\n\tconstructor(\n\t\tlayerIndex: LayerIndex,\n\t\tinitialWidth?: number,\n\t\tinitialHeight?: number,\n\t\tinitialX: number = 0,\n\t\tinitialY: number = 0,\n\t) {\n\t\tsuper(layerIndex, initialWidth, initialHeight, initialX, initialY);\n\t}\n\n\t_isEntityValid(entity: IEntity): boolean {\n\t\treturn super._entityIsRenderable(entity) && this._entityIsUpdatable(entity);\n\t}\n}\n","import { IRenderingLayer, RenderingLayer } from '..';\nimport { LayerIndex, IEntity } from '../../types';\n\nexport interface IDeferredLayer extends IRenderingLayer {\n\treadonly deferredTime: number;\n}\n\nexport class DeferredLayer extends RenderingLayer implements IDeferredLayer {\n\t/**\n\t * Time in MS between layer updates and renders\n\t */\n\treadonly deferredTime: number;\n\n\t/**\n\t * Time in MS since the last render\n\t */\n\tprivate elapsedTimeSinceRender: number;\n\n\tconstructor(\n\t\tdeferredTime: number,\n\t\tlayerIndex: LayerIndex,\n\t\tinitialWidth?: number,\n\t\tinitialHeight?: number,\n\t\tinitialX: number = 0,\n\t\tinitialY: number = 0,\n\t) {\n\t\tsuper(layerIndex, initialWidth, initialHeight, initialX, initialY);\n\n\t\tthis.deferredTime = deferredTime;\n\t\tthis.elapsedTimeSinceRender = 0;\n\t}\n\n\t_isEntityValid(entity: IEntity): boolean {\n\t\treturn super._entityIsRenderable(entity) && this._entityIsUpdatable(entity);\n\t}\n\n\tupdate(deltaTime: number) {\n\t\tif (this.elapsedTimeSinceRender > this.deferredTime) {\n\t\t\tsuper.update(deltaTime);\n\t\t}\n\t\tthis.elapsedTimeSinceRender += deltaTime;\n\t}\n\n\trender() {\n\t\tif (this.elapsedTimeSinceRender > this.deferredTime) {\n\t\t\tthis.elapsedTimeSinceRender = 0;\n\t\t\tsuper.render();\n\t\t}\n\t}\n}\n","// Engine Exports\nimport Engine from './Engine';\nexport default Engine;\nexport { IEngine } from './Engine';\n\n// Layer Exports\nexport { IRenderingLayer, RenderingLayer } from './RenderingLayer';\nexport { IStaticLayer, StaticLayer } from './RenderingLayer/StaticLayer';\nexport { IDynamicLayer, DynamicLayer } from './RenderingLayer/DynamicLayer';\nexport { IDeferredLayer, DeferredLayer } from './RenderingLayer/DeferredLayer';\n\n// Type Exports\nexport * from './types';\n","\nexport const enum Colors {\n    BACKGROUND = 'rgb(14, 17, 37)',\n    SCORE_BACKGROUND = '#FF0',\n    SCORE_TEXT = 'rgb(14, 17, 37)',\n    WALLS = 'rgb(17,0,244)',\n    PACMAN = '#FF0',\n};\n\nexport const enum LayerIndex {\n    BACKGROUND,\n    SCORE,\n    ANIMALS,\n    PACMAN,\n};\n\nexport const MIN_MOUTH_SIZE = 0.001; // angle in rads\nexport const MAX_MOUTH_SIZE = 0.2; // angle in rads\nexport const MOUTH_SPEED = MAX_MOUTH_SIZE / 650; // takes x ms to open or close his mouth.\n\nexport const BODY_SPEED = 75 / 650; // 75px movement every 650 ms.\nexport const BODY_RADIUS = 100; // body radius of packman.\n\nexport const pCx = 200;\nexport const pCy = 225;\n\nexport const ANIMAL_SPREAD_DISTANCE = 300;","import { IEntity, IRenderingLayer } from '../../../src';\n\n// Dog and Cat image from: https://www.petbacker.com/blog/how-to/tips-on-how-to-make-a-dog-and-cat-become-friends\nimport * as DogCatCoveryJpg from '../dog-and-cat-cover.jpg';\n\nimport IManager from './manager';\n\nexport default class Animal implements IEntity {\n\n    layer: IRenderingLayer;\n    animalManager: IManager<Animal>;\n    \n    img: HTMLImageElement;\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n\n    constructor(x: number, y: number, layer: IRenderingLayer, animalManager: IManager<Animal>) {\n        this.layer = layer;\n\n        this.width = 200;\n        this.height = 100;\n        this.x = x;\n        this.y = y - this.height/2;\n\n        const canvasImg = new Image();\n        canvasImg.src = DogCatCoveryJpg.default;\n        canvasImg.onload = this.handleLoad(canvasImg);\n\n        this.animalManager = animalManager;\n    }\n\n    handleLoad = (canvasImg: HTMLImageElement) => () => {\n        this.img = canvasImg;\n        this.animalManager.add(this);\n        this.layer.addEntity(this);\n    }\n\n    getEatten() {\n        this.animalManager.remove(this);\n        this.layer.removeEntity(this);\n    }\n\n    update(deltaTime: number) {\n        // Animals do not move.\n    }\n    \n    render(context: CanvasRenderingContext2D) {\n        if(this.img) {\n            context.drawImage(\n                this.img, \n                this.x, this.y,\n                this.width, this.height\n            );\n        }\n    }\n}","import { IEntity } from '../../../src';\nimport { Colors } from '../constants';\n\nexport default class Background implements IEntity {\n    width: number;\n    height: number;\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n    }\n\n    render(context: CanvasRenderingContext2D) {\n        context.fillStyle = Colors.BACKGROUND;\n        context.fillRect(0, 0, this.width, this.height);\n\n        context.fillStyle = Colors.WALLS;\n        context.fillRect(0, 375, this.width, 75);\n        context.fillRect(0, 0, this.width, 75);\n    }\n}","import { IEntity, IRenderingLayer } from \"../../../src\";\n\nimport Score from \"./score\";\nimport Animal from \"./animal\";\n\nimport IManager from './manager';\n\nimport { BODY_RADIUS, pCy, BODY_SPEED, MOUTH_SPEED, MIN_MOUTH_SIZE, MAX_MOUTH_SIZE, Colors } from \"../constants\";\n\n/**\n * https://cwestblog.com/2017/02/02/canvas-animating-pacman-head-in-js/\n * With some modifications.\n */\nexport default class PacMan implements IEntity {\n    layer: IRenderingLayer; // layer used for max width/height.\n    scorer: Score; // layer used for score\n    animalManager: IManager<Animal>;\n\n    radius: number;\n\n    x: number;\n    y: number;\n\n    dx: number;\n    dy: number;\n\n    img: HTMLImageElement;\n    \n    mouthSize: number;\n    mouthDelta: number;\n    mouthStart: number;\n    mouthEnd: number;\n\n    eyeCXdelta: number;\n    eyeCYdelta: number;\n\n    score: number;\n\n    orientation: 'left' | 'right';\n\n    constructor(layer: IRenderingLayer, animalManager: IManager<Animal>, scorer: Score) {\n        this.layer = layer;\n        this.scorer = scorer;\n        this.animalManager = animalManager;\n\n        this.radius = BODY_RADIUS;\n        this.x = layer.getWidth()/2 + layer.getX(); // center in the layer.\n        this.y = pCy;\n        this.orientation = 'left';\n\n        this.dx = -BODY_SPEED;\n        this.dy = 0; // not moving in y direction at all.\n\n        this.score = 0;\n\n        this.mouthSize = 0.2;\n        this.mouthDelta = MOUTH_SPEED;\n        this.mouthStart = Math.PI;\n        this.mouthEnd = 2*Math.PI;\n\n        this.eyeCXdelta = 50 * Math.cos(0.3*Math.PI);\n        this.eyeCYdelta = 50 * Math.sin(0.3*Math.PI);\n    }\n\n    isOutOfBounds = (x: number) => (x + this.radius) > this.layer.getWidth() || (x - this.radius) < this.layer.getX();\n\n    changeDirection(directionKey: 'left' | 'right') {\n        if(directionKey === 'left') {\n            this.orientation = 'left';\n            this.dx = -Math.abs(this.dx);\n        } else if(directionKey === 'right') {\n            this.orientation = 'right';\n            this.dx = Math.abs(this.dx);\n        }\n    };\n\n    updateAnimalBounds() {\n        const animals = this.animalManager.get();\n        for(let i = 0; i<animals.length; i++) {\n            const animal = animals[i];\n            let x = this.x;\n            if((animal.x < x) && (animal.x + animal.width) > (this.x + this.radius)) {\n                if(animal.y > (this.y - this.radius) && (animal.y + animal.height) < (this.y + this.radius)) {\n                    animal.getEatten();\n                    this.score += 1;\n                    this.scorer.updateScore(this.score);\n                }\n            }\n        }\n    };\n\n    updateBody(deltaTime: number) {\n        this.mouthSize += this.mouthDelta * deltaTime\n        \n        if(this.mouthSize <= 0 && this.mouthDelta < 0) {\n            // reverse direction\n            this.mouthDelta *= -1;\n        }\n        if(this.mouthSize <= 0) {\n            this.mouthSize = MIN_MOUTH_SIZE;\n        }\n        \n        if(this.orientation === 'left') {\n            this.mouthStart = Math.PI - this.mouthSize*Math.PI;\n            this.mouthEnd = Math.PI + this.mouthSize*Math.PI\n        } else {\n            this.mouthStart = this.mouthSize*Math.PI; // 36 degs in rad\n            this.mouthEnd = (2 - this.mouthSize)*Math.PI; // 324 degs in rad\n        }\n\n        let eyeAngle = (0.25 + this.mouthSize)*Math.PI;\n        this.eyeCXdelta = 50 * Math.cos(eyeAngle);\n        this.eyeCYdelta = 50 * Math.sin(eyeAngle);\n\n        if(this.mouthSize > MAX_MOUTH_SIZE && this.mouthDelta > 0) {\n            // reverse direction\n            this.mouthDelta *= -1;\n        }\n    }\n\n    updatePosition(deltaTime) {\n        const x = this.x + this.dx * deltaTime;\n        if(!this.isOutOfBounds(x)) {\n            this.x = x;\n        }\n        this.updateAnimalBounds();\n    }\n\n    update(deltaTime: number) {\n        this.updateBody(deltaTime);\n        this.updatePosition(deltaTime);\n    }\n\n    render(context: CanvasRenderingContext2D) {\n        const radius = 100;\n\n        context.beginPath();\n        // draw his body\n        context.arc(\n            this.x, this.y, radius, \n            this.mouthStart, this.mouthEnd,\n            this.orientation === 'left'\n        );\n        // line for the mouth, to the center\n        context.lineTo(this.x, this.y);\n        context.closePath();\n        context.fillStyle = Colors.PACMAN;\n        context.fill();\n\n        // outline \n        context.strokeStyle = '#000';\n        context.stroke();\n\n        // A circle for the eye\n        context.beginPath();\n        let eyeOrientation = this.orientation === 'right' ? 1 : -1;\n        context.arc(this.x + this.eyeCXdelta * eyeOrientation, this.y - this.eyeCYdelta, 10, 0, 2 * Math.PI);\n        context.fillStyle = '#000';\n        context.fill();\n\n        // Outline the eye\n        context.strokeStyle = '#FFF';\n        context.stroke();\n\n    }\n}","import { IEntity, IStaticLayer } from \"../../../src\";\nimport { Colors } from \"../constants\";\n\nexport default class Score implements IEntity {\n    layer: IStaticLayer;\n\n    width: number;\n    height: number;\n    score: number;\n\n    constructor(layer: IStaticLayer) {\n        this.layer = layer;\n        this.width = layer.getWidth();\n        this.height = layer.getHeight();\n\n        this.score = 0;\n    }\n\n    updateScore(newScore) {\n        this.score = newScore;\n        this.layer.allowRenderOnNextFrame();\n    }\n\n    render(context: CanvasRenderingContext2D) {\n        context.fillStyle = Colors.SCORE_BACKGROUND;\n        context.fillRect(this.width - 250, 10, 200, 65);\n\n        context.fillStyle = Colors.SCORE_TEXT;\n        context.font = '30px Arial';\n        context.fillText(`Score: ${this.score}`, this.width - 220, 50);\n    }\n}","\nexport default interface IManager<T> {\n    remove(entity: T): void;\n    add(entity: T): void;\n    get(): T[];\n}\n\nexport class Manager<T> implements IManager<T> {\n\n    entities: T[];\n\n    constructor(){\n        this.entities = [];\n    }\n\n    remove(entity: T) {\n        const idx = this.entities.indexOf(entity);\n        if(idx !== -1) {\n            this.entities.splice(idx, 1);\n        }\n    }\n\n    add(entity: T) {\n        this.entities.push(entity);\n    }\n\n    get() {\n        return this.entities;\n    }\n}\n","import Engine, { StaticLayer, DynamicLayer } from '../../src';\n\nimport { LayerIndex, pCx, pCy, ANIMAL_SPREAD_DISTANCE } from './constants';\n\nimport Animal from './entities/animal';\nimport Background from './entities/background';\nimport PacMan from './entities/pacman';\nimport Score from './entities/score';\n\nimport { Manager } from './entities/manager';\n\nconst engine = new Engine();\nconst animalManager = new Manager<Animal>();\n\n// Create the background layer\nconst backgroundLayer = new StaticLayer(LayerIndex.BACKGROUND);\nconst backgroundEntity = new Background(backgroundLayer.getWidth(), backgroundLayer.getHeight());\nbackgroundLayer.addEntity(backgroundEntity);\n\n// Register the layer background.\nengine.registerLayer(backgroundLayer);\n\nbackgroundLayer.allowRenderOnNextFrame();\n\n// Create the animals\nconst animalsLayer = new DynamicLayer(LayerIndex.ANIMALS);\n// add 6 animals.\nfor (let i = 0; i<6; i++) {\n    animalManager.add(new Animal(pCx + ANIMAL_SPREAD_DISTANCE * i, pCy, animalsLayer, animalManager));\n}\n\n// Register the square layer.\nengine.registerLayer(animalsLayer);\n\n// Create the score layer\nconst scoreLayer = new StaticLayer(LayerIndex.SCORE);\nconst scoreEntity = new Score(scoreLayer);\nscoreLayer.addEntity(scoreEntity);\n\n// Register the layer score.\nengine.registerLayer(scoreLayer);\n\nscoreLayer.allowRenderOnNextFrame();\n\n\n// Create the pacman\nconst pacManLayer = new DynamicLayer(LayerIndex.PACMAN);\nconst pacMan = new PacMan(pacManLayer, animalManager, scoreEntity);\npacManLayer.addEntity(pacMan);\n\n// Register the pacman layer.\nengine.registerLayer(pacManLayer);\n\n// Start rendering.\nengine.start();\n\ndocument.body.onkeydown = function(keyEvent){\n    if (keyEvent.key === 'd') {\n        pacMan.changeDirection(\"right\");\n    } else if(keyEvent.key === 'a') {\n        pacMan.changeDirection(\"left\");\n    }\n};"]}